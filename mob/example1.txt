====================AndroidManifest========================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <application
        android:name=".presentation.MyApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Countryapp"
        tools:targetApi="31">
        <activity
            android:name=".presentation.FilterActivity"
            android:exported="false">
            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
        <activity
            android:name=".presentation.CountryItemActivity"
            android:exported="false">
            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
        <activity
            android:name=".presentation.MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
    </application>
</manifest>
===================CountriesContract======================
import android.provider.BaseColumns
object CountriesContract {
    const val TYPE_TEXT = " TEXT"
    const val TYPE_INTEGER = "INTEGER"
    object CountriesEntry : BaseColumns {
        const val TABLE_NAME = "countries"
        const val COLUMN_NAME = "name"
        const val COLUMN_CAPITAL = "capital"
        const val COLUMN_POPULATION = "population"
        const val COLUMN_VISITED = "visited"
        const val CREATE_COMMAND = "CREATE TABLE $TABLE_NAME (" +
                "${BaseColumns._ID} $TYPE_INTEGER PRIMARY KEY," +
                "$COLUMN_NAME $TYPE_TEXT," +
                "$COLUMN_CAPITAL $TYPE_TEXT," +
                "$COLUMN_POPULATION $TYPE_INTEGER," +
                "$COLUMN_VISITED $TYPE_INTEGER)"
        const val DROP_COMMAND = "DROP TABLE IF EXISTS $TABLE_NAME"
    }
}
===================CountriesDbHelper======================
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
class CountriesDbHelper(context: Context) :
    SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {
    companion object {
        const val DATABASE_VERSION = 1
        const val DATABASE_NAME = "countries.db"
    }
    override fun onCreate(db: SQLiteDatabase) {
        db.execSQL(CountriesContract.CountriesEntry.CREATE_COMMAND)
    }
    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        db.execSQL(CountriesContract.CountriesEntry.DROP_COMMAND)
        onCreate(db)
    }
}
===================DbCountryRepository====================
import android.content.ContentValues
import android.provider.BaseColumns
import com.skuld.country_app.domain.Country
import com.skuld.country_app.domain.CountryRepository
class DbCountryRepository(private val dbHelper: CountriesDbHelper) : CountryRepository {
    private val tableName = CountriesContract.CountriesEntry.TABLE_NAME
    private val columnName = CountriesContract.CountriesEntry.COLUMN_NAME
    private val columnCapital = CountriesContract.CountriesEntry.COLUMN_CAPITAL
    private val columnPopulation = CountriesContract.CountriesEntry.COLUMN_POPULATION
    private val columnVisited = CountriesContract.CountriesEntry.COLUMN_VISITED
    override fun add(country: Country) {
        val database = dbHelper.writableDatabase
        val contentValues = ContentValues()
        contentValues.put(columnName, country.name)
        contentValues.put(columnCapital, country.capital)
        contentValues.put(columnPopulation, country.population)
        contentValues.put(columnVisited, country.visited)
        database.insert(tableName, null, contentValues);
    }
    override fun delete(country: Country) {
        val database = dbHelper.writableDatabase
        val selection = BaseColumns._ID + " = ?"
        val selectionArgs = arrayOf(country.id.toString())
        database.delete(tableName, selection, selectionArgs)
    }
    override fun edit(country: Country) {
        val database = dbHelper.writableDatabase
        val contentValues = ContentValues()
        contentValues.put(columnName, country.name)
        contentValues.put(columnCapital, country.capital)
        contentValues.put(columnPopulation, country.population)
        contentValues.put(columnVisited, country.visited)
        val selection = BaseColumns._ID + " = ?"
        val selectionArgs = arrayOf(country.id.toString())
        database.update(tableName, contentValues, selection, selectionArgs)
    }
    override fun getAll(): List<Country> {
        val database = dbHelper.readableDatabase
        val projection = arrayOf(
            BaseColumns._ID,
            columnName,
            columnCapital,
            columnPopulation,
            columnVisited
        )
        val sortOrder = "${BaseColumns._ID} ASC"
        val cursor = database.query(tableName, projection, null, null, null, null, sortOrder)
        val items = mutableListOf<Country>()
        with(cursor) {
            while (moveToNext()) {
                val id = getInt(getColumnIndexOrThrow(BaseColumns._ID))
                val name = getString(getColumnIndexOrThrow(columnName))
                val capital = getString(getColumnIndexOrThrow(columnCapital))
                val population = getInt(getColumnIndexOrThrow(columnPopulation))
                val visited = getInt(getColumnIndexOrThrow(columnVisited)) > 0
                val country = Country(name, capital, population, visited, id)
                items.add(country)
            }
        }
        cursor.close()
        return items
    }
    override fun getById(id: Int): Country? {
        val database = dbHelper.readableDatabase
        val projection = arrayOf(
            BaseColumns._ID,
            columnName,
            columnCapital,
            columnPopulation,
            columnVisited
        )
        val selection = BaseColumns._ID + " = ?"
        val selectionArgs = arrayOf(id.toString())
        val cursor =
            database.query(tableName, projection, selection, selectionArgs, null, null, null)
        if (cursor.count == 0) return null
        val result: Country?
        with(cursor) {
            moveToNext()
            val storedId = getInt(getColumnIndexOrThrow(BaseColumns._ID))
            val name = getString(getColumnIndexOrThrow(columnName))
            val capital = getString(getColumnIndexOrThrow(columnCapital))
            val population = getInt(getColumnIndexOrThrow(columnPopulation))
            val visited = getInt(getColumnIndexOrThrow(columnVisited)) > 0
            val country = Country(name, capital, population, visited, storedId)
            result = country
        }
        cursor.close()
        return result
    }
}
===================JsonCountryRepository======================
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.skuld.country_app.domain.Country
import com.skuld.country_app.domain.CountryRepository
import java.io.File
class JsonCountryRepository(private val filesDir: String, private val path: String) :
    CountryRepository {
    private val items: MutableList<Country>
    private var maxId: Int = 0
    init {
        var jsonData: String? = null
        if (File(filesDir, path).exists())
            jsonData = File(filesDir, path).readText()
        items = if (jsonData == null || jsonData.isEmpty()) {
            mutableListOf()
        } else {
            val typeToken = object : TypeToken<MutableList<Country>>() {}.type
            val elements = Gson().fromJson<MutableList<Country>>(jsonData, typeToken)
            maxId = elements.maxOf { it.id }
            elements
        }
    }
    override fun add(country: Country) {
        val id = ++maxId
        country.id = id
        items.add(country)
    }
    override fun delete(country: Country) {
        items.removeIf { it.id == country.id }
    }
    override fun edit(country: Country) {
        val index = items.indexOfFirst { it.id == country.id }
        if (index < 0)
            throw RuntimeException("Элемент не найден")
        items[index] = country
    }
    override fun getAll(): List<Country> = items
    override fun getById(id: Int): Country? = items.firstOrNull() { it.id == id }
    fun save() {
        val jsonData = Gson().toJson(items)
        File(filesDir, path).writeText(jsonData)
    }
}
===================Country====================================
import android.os.Parcelable
import kotlinx.parcelize.Parcelize
@Parcelize
data class Country(
    var name: String,
    var capital: String,
    var population: Int,
    var visited: Boolean,
    var id: Int = UNDEFINED_ID,
) : Parcelable {
    companion object {
        const val UNDEFINED_ID = 0
    }
}
===================CountryRepository==========================
interface CountryRepository {
    fun add(country: Country)
    fun delete(country: Country)
    fun edit(country: Country)
    fun getAll(): List<Country>
    fun getById(id: Int) : Country?
}
===================CountryService======================
class CountryService(var repository: CountryRepository) {
    fun add(country: Country) = repository.add(country)
    fun delete(country: Country) = repository.delete(country)
    fun edit(country: Country) = repository.edit(country)
    fun getAll() = repository.getAll()
    fun getById(id: Int) = repository.getById(id)
}
===================CountryItemActivity======================
import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.skuld.country_app.R
import com.skuld.country_app.domain.Country
class CountryItemActivity : AppCompatActivity(), CountryItemFragment.OnEditingFinishedListener {
    private var screenMode = MODE_UNKNOWN
    private var countryId = Country.UNDEFINED_ID
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_country_item)
        parseIntent()
        if (savedInstanceState == null) {
            launchRightMode()
        }
    }
    override fun onEditingFinished() {
        finish()
    }
    private fun launchRightMode() {
        val fragment = when (screenMode) {
            MODE_EDIT -> CountryItemFragment.newInstanceEditItem(countryId)
            MODE_ADD -> CountryItemFragment.newInstanceAddItem()
            else -> throw RuntimeException("Unknown screen mode $screenMode")
        }
        supportFragmentManager.beginTransaction()
            .replace(R.id.country_item_container, fragment)
            .commit()
    }
    private fun parseIntent() {
        if (!intent.hasExtra(EXTRA_SCREEN_MODE)) {
            throw RuntimeException("Param screen mode is absent")
        }
        val mode = intent.getStringExtra(EXTRA_SCREEN_MODE)
        if (mode != MODE_EDIT && mode != MODE_ADD) {
            throw RuntimeException("Unknown screen mode $mode")
        }
        screenMode = mode
        if (screenMode == MODE_EDIT) {
            if (!intent.hasExtra(EXTRA_COUNTRY_ID)) {
                throw RuntimeException("Param shop item id is absent")
            }
            countryId = intent.getIntExtra(EXTRA_COUNTRY_ID, Country.UNDEFINED_ID)
        }
    }
    companion object {
        private const val EXTRA_SCREEN_MODE = "extra_mode"
        private const val EXTRA_COUNTRY_ID = "extra_country_id"
        private const val MODE_EDIT = "mode_edit"
        private const val MODE_ADD = "mode_add"
        private const val MODE_UNKNOWN = ""
        fun newIntentAddItem(context: Context): Intent {
            val intent = Intent(context, CountryItemActivity::class.java)
            intent.putExtra(EXTRA_SCREEN_MODE, MODE_ADD)
            return intent
        }
        fun newIntentEditItem(context: Context, shopItemId: Int): Intent {
            val intent = Intent(context, CountryItemActivity::class.java)
            intent.putExtra(EXTRA_SCREEN_MODE, MODE_EDIT)
            intent.putExtra(EXTRA_COUNTRY_ID, shopItemId)
            return intent
        }
    }
}
===================CountryItemFragment======================
import android.content.Context
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.CheckBox
import android.widget.EditText
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import com.google.android.material.textfield.TextInputLayout
import com.skuld.country_app.R
import com.skuld.country_app.domain.Country
class CountryItemFragment : Fragment() {
    private lateinit var viewModel: CountryItemViewModel
    private lateinit var onEditingFinishedListener: OnEditingFinishedListener
    private lateinit var etName: EditText
    private lateinit var etCapital: EditText
    private lateinit var etPopulation: EditText
    private lateinit var cbVisited: CheckBox
    private lateinit var saveButton: Button
    private lateinit var tilName: TextInputLayout
    private lateinit var tilCapital: TextInputLayout
    private lateinit var tilPopulation: TextInputLayout
    private var screenMode: String = MODE_UNKNOWN
    private var countryItemId: Int = Country.UNDEFINED_ID
    override fun onAttach(context: Context) {
        super.onAttach(context)
        if (context is OnEditingFinishedListener) {
            onEditingFinishedListener = context
        } else {
            throw RuntimeException("Activity must implement OnEditingFinishedListener")
        }
    }
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        parseParams()
    }
    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        return inflater.inflate(R.layout.fragment_country_item, container, false)
    }
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initViews(view)
        viewModel = ViewModelProvider(this)[CountryItemViewModel::class.java]
        addTextChangeListeners()
        launchRightMode()
        observeViewModel()
    }
    private fun initViews(view: View) {
        etName = view.findViewById(R.id.et_name)
        etCapital = view.findViewById(R.id.et_capital)
        etPopulation = view.findViewById(R.id.et_population)
        cbVisited = view.findViewById(R.id.cb_is_visited)
        saveButton = view.findViewById(R.id.save_button)
        tilCapital = view.findViewById(R.id.til_capital)
        tilName = view.findViewById(R.id.til_name)
        tilPopulation = view.findViewById(R.id.til_population)
    }
    private fun observeViewModel() {
        viewModel.errorInputName.observe(viewLifecycleOwner) {
            val message = if (it) {
                getString(R.string.error_input_name)
            } else {
                null
            }
            tilName.error = message
        }
        viewModel.errorInputCapital.observe(viewLifecycleOwner) {
            val message = if (it) {
                getString(R.string.error_input_capital)
            } else null
            tilCapital.error = message
        }
        viewModel.errorInputPopulation.observe(viewLifecycleOwner) {
            val message = if (it) {
                getString(R.string.error_input_population)
            } else {
                null
            }
            tilPopulation.error = message
        }
        viewModel.shouldCloseScreen.observe(viewLifecycleOwner) {
            onEditingFinishedListener.onEditingFinished()
        }
    }
    private fun launchRightMode() {
        when (screenMode) {
            MODE_EDIT -> launchEditMode()
            MODE_ADD -> launchAddMode()
        }
    }
    private fun launchEditMode() {
        viewModel.getCountry(countryItemId)
        viewModel.country.observe(viewLifecycleOwner) {
            etName.setText(it.name)
            etCapital.setText(it.capital)
            etPopulation.setText(it.population.toString())
            cbVisited.isChecked = it.visited
        }
        saveButton.setOnClickListener {
            viewModel.editCountry(
                etName.text?.toString(),
                etCapital.text?.toString(),
                etPopulation.text?.toString(),
                cbVisited.isChecked
            )
        }
    }
    private fun launchAddMode() {
        saveButton.setOnClickListener {
            viewModel.addCountry(
                etName.text?.toString(),
                etCapital.text?.toString(),
                etPopulation.text?.toString(),
                cbVisited.isChecked
            )
        }
    }
    private fun addTextChangeListeners() {
        etName.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun afterTextChanged(s: Editable?) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.resetErrorInputName()
            }
        })
        etCapital.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun afterTextChanged(s: Editable?) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.resetErrorInputCapital()
            }
        })
        etPopulation.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun afterTextChanged(s: Editable?) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                viewModel.resetErrorInputPopulation()
            }
        })
    }
    private fun parseParams() {
        val args = requireArguments()
        if (!args.containsKey(SCREEN_MODE)) {
            throw RuntimeException("Param screen mode is absent")
        }
        val mode = args.getString(SCREEN_MODE)
        if (mode != MODE_EDIT && mode != MODE_ADD) {
            throw RuntimeException("Unknown screen mode $mode")
        }
        screenMode = mode
        if (screenMode == MODE_EDIT) {
            if (!args.containsKey(COUNTRY_ITEM_ID)) {
                throw RuntimeException("Param country item id is absent")
            }
            countryItemId = args.getInt(COUNTRY_ITEM_ID, Country.UNDEFINED_ID)
        }
    }
    interface OnEditingFinishedListener {
        fun onEditingFinished()
    }
    companion object {
        private const val SCREEN_MODE = "extra_mode"
        private const val COUNTRY_ITEM_ID = "extra_country_item_id"
        private const val MODE_EDIT = "mode_edit"
        private const val MODE_ADD = "mode_add"
        private const val MODE_UNKNOWN = ""
        fun newInstanceAddItem(): CountryItemFragment {
            return CountryItemFragment().apply {
                arguments = Bundle().apply {
                    putString(SCREEN_MODE, MODE_ADD)
                }
            }
        }
        fun newInstanceEditItem(shopItemId: Int): CountryItemFragment {
            return CountryItemFragment().apply {
                arguments = Bundle().apply {
                    putString(SCREEN_MODE, MODE_EDIT)
                    putInt(COUNTRY_ITEM_ID, shopItemId)
                }
            }
        }
    }
}
===================CountryItemViewModel=====================
import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.skuld.country_app.domain.Country

class CountryItemViewModel(application: Application) : AndroidViewModel(application) {
    private val service = (application as MyApplication).service
    private val _errorInputName = MutableLiveData<Boolean>()
    val errorInputName: LiveData<Boolean>
        get() = _errorInputName
    private val _errorInputCapital = MutableLiveData<Boolean>()
    val errorInputCapital: LiveData<Boolean>
        get() = _errorInputCapital
    private val _errorInputPopulation = MutableLiveData<Boolean>()
    val errorInputPopulation: LiveData<Boolean>
        get() = _errorInputPopulation
    private val _country = MutableLiveData<Country>()
    val country: LiveData<Country>
        get() = _country
    private val _shouldCloseScreen = MutableLiveData<Unit>()
    val shouldCloseScreen: LiveData<Unit>
        get() = _shouldCloseScreen
    fun getCountry(countryId: Int) {
        val item = service.getById(countryId)
        _country.value = item ?: throw RuntimeException("Сущность не найдена")
    }
    fun addCountry(
        inputName: String?,
        inputCapital: String?,
        inputPopulation: String?,
        inputVisited: Boolean
    ) {
        val name = parseName(inputName)
        val capital = parseCapital(inputCapital)
        val population = parsePopulation(inputPopulation)
        val fieldsValid = validateInput(name, capital, population)
        if (fieldsValid) {
            val country = Country(name, capital, population, inputVisited)
            service.add(country)
            finishWork()
        }
    }
    fun editCountry(
        inputName: String?,
        inputCapital: String?,
        inputPopulation: String?,
        inputVisited: Boolean
    ) {
        val name = parseName(inputName)
        val capital = parseName(inputCapital)
        val population = parsePopulation(inputPopulation)
        val fieldsValid = validateInput(name, capital, population)
        if (fieldsValid) {
            _country.value?.let {
                val item = it.copy(
                    name = name,
                    capital = capital,
                    population = population,
                    visited = inputVisited
                )
                service.edit(item)
                finishWork()
            }
        }
    }
    private fun parseName(inputName: String?): String {
        return inputName?.trim() ?: ""
    }
    private fun parseCapital(inputName: String?): String {
        return inputName?.trim() ?: ""
    }
    private fun parsePopulation(inputPopulation: String?): Int {
        return try {
            inputPopulation?.trim()?.toInt() ?: 0
        } catch (e: Exception) {
            0
        }
    }
    private fun validateInput(name: String, capital: String, population: Int): Boolean {
        var result = true
        if (name.isBlank() || name.length < 5) {
            _errorInputName.value = true
            result = false
        }
        if (capital.isBlank() || name.length < 5) {
            _errorInputCapital.value = true
            result = false
        }
        if (population <= 100) {
            _errorInputPopulation.value = true
            result = false
        }
        return result
    }
    fun resetErrorInputName() {
        _errorInputName.value = false
    }
    fun resetErrorInputCapital() {
        _errorInputCapital.value = false
    }
    fun resetErrorInputPopulation() {
        _errorInputPopulation.value = false
    }
    private fun finishWork() {
        _shouldCloseScreen.value = Unit
    }
}
===================CountryListAdapter=======================
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.skuld.country_app.R
import com.skuld.country_app.domain.Country
class CountryListAdapter : RecyclerView.Adapter<CountryListAdapter.CountryAdapterViewHolder>() {
    var list: List<Country> = mutableListOf()
        set(value) {
            field = value
            notifyDataSetChanged()
        }
    var onCountryItemLongClickListener: ((Country) -> Unit)? = null
    var onCountryItemClickListener: ((Country) -> Unit)? = null
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CountryAdapterViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_country, parent, false)
        return CountryAdapterViewHolder(view)
    }
    override fun onBindViewHolder(viewHolder: CountryAdapterViewHolder, position: Int) {
        val item = list[position]
        viewHolder.tvName.text = item.name
        viewHolder.tvCapital.text = item.capital
        viewHolder.tvPopulation.text = item.population.toString()
        viewHolder.view.setOnLongClickListener {
            onCountryItemLongClickListener?.invoke(item)
            true
        }
        viewHolder.view.setOnClickListener {
            onCountryItemClickListener?.invoke(item)
        }
    }
    override fun getItemCount(): Int = list.size
    class CountryAdapterViewHolder(val view: View) : RecyclerView.ViewHolder(view) {
        val tvName: TextView = view.findViewById(R.id.tv_name)
        val tvCapital: TextView = view.findViewById(R.id.tv_capital)
        val tvPopulation: TextView = view.findViewById(R.id.tv_population)
    }
}
===================FilterActivity===========================
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.RecyclerView
import com.skuld.country_app.R
import com.skuld.country_app.domain.Country
class FilterActivity : AppCompatActivity() {
    private lateinit var rv: RecyclerView
    private lateinit var adapter: CountryListAdapter
    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_filter)
        rv = findViewById(R.id.rv_filter)
        adapter = CountryListAdapter()
        parseIntent()
        rv.adapter = adapter
    }
    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    private fun parseIntent() {
        if (!intent.hasExtra(EXTRA_COUNTRIES))
            throw RuntimeException()
        adapter.list =
            intent.getParcelableArrayListExtra(
                EXTRA_COUNTRIES,
                Country::class.java
            )?.toMutableList() ?: mutableListOf()
    }
    companion object {
        private const val EXTRA_COUNTRIES = "extra_countries"
        fun newIntent(context: Context, countries: ArrayList<Country>): Intent {
            val intent = Intent(context, FilterActivity::class.java)
            intent.putExtra(EXTRA_COUNTRIES, countries)
            return intent
        }
    }
}
===================MainActivity=============================
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentContainerView
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.floatingactionbutton.FloatingActionButton
import com.skuld.country_app.R
import com.skuld.country_app.domain.Country
class MainActivity : AppCompatActivity(), CountryItemFragment.OnEditingFinishedListener {
    private lateinit var viewModel: MainViewModel
    private lateinit var countryListAdapter: CountryListAdapter
    private lateinit var buttonAddItem: FloatingActionButton
    private lateinit var rvCountryList: RecyclerView
    private var countryItemContainer: FragmentContainerView? = null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        buttonAddItem = findViewById(R.id.button_add_item)
        countryItemContainer = findViewById(R.id.country_item_container)
        rvCountryList = findViewById(R.id.rv_country_list)
        setupRecyclerView()
        viewModel = ViewModelProvider(this).get(MainViewModel::class.java)
        viewModel.getCountriesLive().observe(this) {
            countryListAdapter.list = it
        }
        buttonAddItem.setOnClickListener {
            if (isOnePaneMode()) {
                val intent = CountryItemActivity.newIntentAddItem(this)
                startActivity(intent)
            } else {
                launchFragment(CountryItemFragment.newInstanceAddItem())
            }
        }
        viewModel.isDbStoreLive().observe(this)
        {
            supportFragmentManager.popBackStack()
            viewModel.loadCountries()
        }
    }
    override fun onEditingFinished() {
        viewModel.loadCountries()
        supportFragmentManager.popBackStack()
    }
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        val inflater = menuInflater
        inflater.inflate(R.menu.main_menu, menu)
        return super.onCreateOptionsMenu(menu)
    }
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.mi_refresh -> refreshItems()
            R.id.mi_json -> viewModel.setJsonRepository()
            R.id.mi_db -> viewModel.setDbRepository()
            R.id.filter -> filterActivity(arrayListOf(Country("111", "222", 333, false, 5)))
            else -> throw RuntimeException()
        }
        return super.onOptionsItemSelected(item);
    }
    private fun filterActivity(arr: ArrayList<Country>) {
        val intent = FilterActivity.newIntent(this, arr)
        startActivity(intent)
    }
    private fun refreshItems() {
        supportFragmentManager.popBackStack()
        viewModel.loadCountries()
    }
    private fun launchFragment(fragment: Fragment) {
        supportFragmentManager.popBackStack()
        supportFragmentManager.beginTransaction()
            .replace(R.id.country_item_container, fragment)
            .addToBackStack(null)
            .commit()
    }
    private fun isOnePaneMode(): Boolean {
        return countryItemContainer == null
    }
    private fun setupRecyclerView() {
        with(rvCountryList) {
            countryListAdapter = CountryListAdapter()
            adapter = countryListAdapter
        }
        setupLongClickListener()
        setupClickListener()
        setupSwipeListener(rvCountryList)
    }
    private fun setupSwipeListener(rvCountryList: RecyclerView) {
        val callback = object : ItemTouchHelper.SimpleCallback(
            0,
            ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT
        ) {
            override fun onMove(
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                target: RecyclerView.ViewHolder
            ): Boolean {
                return false
            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                val item = countryListAdapter.list[viewHolder.adapterPosition]
                viewModel.deleteCountry(item)
            }
        }
        val itemTouchHelper = ItemTouchHelper(callback)
        itemTouchHelper.attachToRecyclerView(rvCountryList)
    }
    private fun setupClickListener() {
        countryListAdapter.onCountryItemClickListener = {
            if (isOnePaneMode()) {
                val intent = CountryItemActivity.newIntentEditItem(this, it.id)
                startActivity(intent)
            } else {
                launchFragment(CountryItemFragment.newInstanceEditItem(it.id))
            }
        }
    }
    private fun setupLongClickListener() {
        countryListAdapter.onCountryItemLongClickListener = {
            Toast.makeText(this@MainActivity, it.toString(), Toast.LENGTH_LONG).show()
        }
    }
    override fun onStop() {
        viewModel.saveJson()
        super.onStop()
    }
}
===================MainViewModel============================
import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import com.skuld.country_app.domain.Country
class MainViewModel(application: Application) : AndroidViewModel(application) {
    private val dbRepository = (application as MyApplication).dbRepository
    private val jsonRepository = (application as MyApplication).jsonRepository
    private val service = (application as MyApplication).service
    private var countries = mutableListOf<Country>()
    private val countriesLive = MutableLiveData<List<Country>>(countries)
    fun getCountriesLive(): LiveData<List<Country>> = countriesLive
    private val isDbStore = MutableLiveData(true)
    fun isDbStoreLive(): LiveData<Boolean> = isDbStore
    fun setJsonRepository() {
        if (isDbStore.value == false) return
        service.repository = jsonRepository
        loadCountries()
        isDbStore.value = false
    }
    fun setDbRepository() {
        if (isDbStore.value == true) return
        service.repository = dbRepository
        loadCountries()
        isDbStore.value = true
    }
    fun loadCountries() {
        val countries = service.getAll()
        setItems(countries)
    }
    fun saveJson() {
        jsonRepository.save()
    }
    fun deleteCountry(country: Country) {
        service.delete(country)
        countries.removeIf { it.id == country.id }
        setItems(countries)
    }
    private fun setItems(items: List<Country>) {
        countries = items.toMutableList()
        countriesLive.value = items
    }
}
===================MyApplication======================
import android.app.Application
import com.skuld.country_app.data.CountriesDbHelper
import com.skuld.country_app.data.DbCountryRepository
import com.skuld.country_app.data.JsonCountryRepository
import com.skuld.country_app.domain.CountryService
const val jsonPath: String = "data.json"
class MyApplication : Application() {
    lateinit var dbRepository: DbCountryRepository
    lateinit var jsonRepository: JsonCountryRepository
    lateinit var service: CountryService
    override fun onCreate() {
        super.onCreate()
        dbRepository = DbCountryRepository(CountriesDbHelper(this))
        jsonRepository = JsonCountryRepository(filesDir.path, jsonPath)
        service = CountryService(dbRepository)
    }
}
===================activity_country_item====================
<?xml version="1.0" encoding="utf-8"?>
<androidx.fragment.app.FragmentContainerView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/country_item_container"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".presentation.CountryItemActivity"
    tools:layout="@layout/fragment_country_item" />
===================activity_filter==========================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".presentation.FilterActivity">
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rv_filter"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:listitem="@layout/item_country" />
</androidx.constraintlayout.widget.ConstraintLayout>
===================activity_main============================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".presentation.MainActivity">
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rv_country_list"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:listitem="@layout/item_country" />
    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/button_add_item"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="16dp"
        android:layout_marginBottom="16dp"
        android:clickable="true"
        android:contentDescription="@string/btn_add_description"
        android:focusable="true"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:srcCompat="@android:drawable/ic_menu_add" />
</androidx.constraintlayout.widget.ConstraintLayout>
===================activity_main(land)======================
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".presentation.MainActivity">
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/rv_country_list"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="@id/guideline_middle"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        tools:listitem="@layout/item_country" />
    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/button_add_item"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="16dp"
        android:layout_marginBottom="16dp"
        android:clickable="true"
        android:contentDescription="@string/btn_add_description"
        android:focusable="true"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="@id/guideline_middle"
        app:srcCompat="@android:drawable/ic_menu_add" />
    <androidx.constraintlayout.widget.Guideline
        android:id="@+id/guideline_middle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_percent="0.5" />
    <androidx.fragment.app.FragmentContainerView
        android:id="@+id/country_item_container"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="@id/guideline_middle"
        tools:layout="@layout/fragment_country_item" />
</androidx.constraintlayout.widget.ConstraintLayout>
===================fragment_country_item======================
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true">
    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".presentation.CountryItemFragment">
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/til_name"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:layout_marginBottom="4dp"
            app:layout_constraintBottom_toTopOf="@id/til_capital"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_chainStyle="packed">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/et_name"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/name_hint"
                android:inputType="textCapWords" />
        </com.google.android.material.textfield.TextInputLayout>
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/til_capital"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:layout_marginBottom="4dp"
            app:layout_constraintBottom_toTopOf="@+id/til_population"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/til_name">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/et_capital"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/capital_hint"
                android:inputType="textCapWords" />
        </com.google.android.material.textfield.TextInputLayout>
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/til_population"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            app:layout_constraintBottom_toTopOf="@+id/ll_visited"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/til_capital">
            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/et_population"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/population_hint"
                android:inputType="number" />
        </com.google.android.material.textfield.TextInputLayout>
        <LinearLayout
            android:id="@+id/ll_visited"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:layout_marginBottom="4dp"
            android:gravity="center"
            android:orientation="horizontal"
            app:layout_constraintBottom_toTopOf="@+id/save_button"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/til_population">
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:gravity="start"
                android:text="@string/is_visited" />
            <CheckBox
                android:id="@+id/cb_is_visited"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content" />
        </LinearLayout>
        <Button
            android:id="@+id/save_button"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:text="@string/save_btn"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</ScrollView>
===================item_country===============================
<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginStart="8dp"
    android:layout_marginTop="4dp"
    android:layout_marginEnd="8dp"
    android:layout_marginBottom="4dp"
    app:cardCornerRadius="4dp"
    app:cardElevation="4dp"
    app:cardUseCompatPadding="true">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/purple_200"
        android:orientation="horizontal"
        android:padding="16dp">
        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical"
            android:layout_gravity="center">
            <TextView
                android:id="@+id/tv_name"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@color/white"
                android:textSize="16sp"
                android:textStyle="bold"
                tools:text="Россия" />
            <TextView
                android:id="@+id/tv_capital"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textColor="@color/white"
                android:textSize="16sp"
                android:textStyle="bold"
                tools:text="Москва" />
        </LinearLayout>
        <TextView
            android:id="@+id/tv_population"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:textColor="@color/white"
            android:textSize="16sp"
            android:textStyle="bold"
            tools:text="150000" />
    </LinearLayout>
</androidx.cardview.widget.CardView>
===================main_menu==================================
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/mi_refresh"
        android:title="Обновить" />
    <item android:id="@+id/mi_json"
        android:title="json" />
    <item android:id="@+id/mi_db"
        android:title="db" />
    <item android:id="@+id/filter"
        android:title="filter" />
</menu>
===================strings====================================
<resources>
    <string name="app_name">country-app</string>
    <string name="btn_add_description">Описание</string>
    <string name="name_hint">Название страны</string>
    <string name="population_hint">Население</string>
    <string name="save_btn">Сохранить</string>
    <string name="capital_hint">Столица</string>
    <string name="is_visited">Посещено</string>
    <string name="error_input_name">Неправильное название</string>
    <string name="error_input_capital">Неправильная страна</string>
    <string name="error_input_population">Неправильное население</string>
</resources>
===================build.gradle(module)=======================
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
}
android {
    namespace 'com.skuld.country_app'
    compileSdk 33
    defaultConfig {
        applicationId "com.skuld.country_app"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
dependencies {
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}