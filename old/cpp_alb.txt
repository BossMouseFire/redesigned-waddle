#include <iostream>
using namespace std;
struct People
{
    int Number;
    string Surname;
    string Name;
    string Partonimyc;
};
struct Elem
{
    People data;
    Elem* next, * prev;
};
class List
{
    Elem* Head, * Tail;
    int Count;
public:
    List();
    List(const List&);
    ~List();
    int GetCount();
    Elem* GetElem(int);
    void DelAll();
    void Del(int pos = 0);
    void Insert(int pos = 0);
    void InsertMiddle(People n);
    void AddTail(People n);
    void AddHead(People n);
    void Print();
    void Print(int pos);
};
List::List()
{
    Head = Tail = NULL;
    Count = 0;
}
List::List(const List& L)
{
    Head = Tail = NULL;
    Count = 0;
    Elem* temp = L.Head;
    while (temp != 0)
    {
        AddTail(temp->data);
        temp = temp->next;
    }
}

List::~List()
{
    DelAll();
}

void List::AddHead(People n)
{
    Elem* temp = new Elem;
    temp->prev = 0;
    temp->data = n;
    temp->next = Head;
    if (Head != 0)
        Head->prev = temp;
    if (Count == 0)
        Head = Tail = temp;
    else
        Head = temp;
    Count++;
}
void List::AddTail(People n)
{
    Elem* temp = new Elem;
    temp->next = 0;
    temp->data = n;
    temp->prev = Tail;
    if (Tail != 0)
        Tail->next = temp;
    if (Count == 0)
        Head = Tail = temp;
    else
        Tail = temp;
    Count++;
}
void List::Insert(int pos)
{
    if (pos == 0)
    {
        cout << "Input position: ";
        cin >> pos;
    }
    if (pos < 1 || pos > Count + 1)
    {
        cout << "Incorrect position !!!\n";
        return;
    }
    if (pos == Count + 1)
    {
        People form;
        cout << "Input new number: ";
        cin >> form.Number;
        cout << "Input new Surname: ";
        cin >> form.Surname;
        cout << "Input new Name: ";
        cin >> form.Name;
        cout << "Input new Partonimyc: ";
        cin >> form.Partonimyc;
        AddTail(form);
        return;
    }
    else if (pos == 1)
    {
        People form;
        cout << "Input new number: ";
        cin >> form.Number;
        cout << "Input new Surname: ";
        cin >> form.Surname;
        cout << "Input new Name: ";
        cin >> form.Name;
        cout << "Input new Partonimyc: ";
        cin >> form.Partonimyc;
        AddHead(form);
        return;
    }
    int i = 1;
    Elem* Ins = Head;
    while (i < pos)
    {
        Ins = Ins->next;
        i++;
    }
    Elem* PrevIns = Ins->prev;
    Elem* temp = new Elem;
    People form;
    cout << "Input new number: ";
    cin >> form.Number;
    cout << "Input new Surname: ";
    cin >> form.Surname;
    cout << "Input new Name: ";
    cin >> form.Name;
    cout << "Input new Partonimyc: ";
    cin >> form.Partonimyc;
    temp->data = form;
    if (PrevIns != 0 && Count != 1)
        PrevIns->next = temp;
    temp->next = Ins;
    temp->prev = PrevIns;
    Ins->prev = temp;
    Count++;
}
void List::Del(int pos)
{
    if (pos == 0)
    {
        cout << "Input position: ";
        cin >> pos;
    }
    if (pos < 1 || pos > Count)
    {
        cout << "Incorrect position !!!\n";
        return;
    }
    int i = 1;
    Elem* Del = Head;
    while (i < pos)
    {
        Del = Del->next;
        i++;
    }
    Elem* PrevDel = Del->prev;
    Elem* AfterDel = Del->next;
    if (PrevDel != 0 && Count != 1)
        PrevDel->next = AfterDel;
    if (AfterDel != 0 && Count != 1)
        AfterDel->prev = PrevDel;
    if (pos == 1)
        Head = AfterDel;
    if (pos == Count)
        Tail = PrevDel;
    delete Del;
    Count--;
}
void List::Print(int pos)
{
    if (pos < 1 || pos > Count)
    {
        cout << "Incorrect position !!!\n";
        return;
    }
    Elem* temp;
    if (pos <= Count / 2)
    {
        temp = Head;
        int i = 1;
        while (i < pos)
        {
            temp = temp->next;
            i++;
        }
    }
    else
    {
        temp = Tail;
        int i = 1;

        while (i <= Count - pos)
        {
            temp = temp->prev;
            i++;
        }
    }
    cout << pos << " element: ";
    cout << temp->data.Number << ", ";
    cout << temp->data.Surname << ", ";
    cout << temp->data.Name << ", ";
    cout << temp->data.Partonimyc << ", " << endl;
}
void List::Print()
{
    if (Count != 0)
    {
        Elem* temp = Head;
        while (temp!= 0)
        {
            cout << temp->data.Number << ", ";
            cout << temp->data.Surname << ", ";
            cout << temp->data.Name << ", ";
            cout << temp->data.Partonimyc;
            temp = temp->next;
            cout << "\n";
        }
    }
}
void List::InsertMiddle(People form)
{
    Elem* temp = new Elem;
    temp = Head;
    if (Count == 0)
    {
        AddTail(form);
        return;
    }
    int count = Count / 2;
    for (int i = 0; i < count; i++)
    {
        temp = temp->next;
    }
    Elem* tempNew = new Elem;
    tempNew->prev = temp->prev;
    temp->prev->next = tempNew;
    tempNew->next = temp;
    temp->prev = tempNew;
    tempNew->data = form;
}
void List::DelAll()
{
    while (Count != 0)
        Del(1);
}
int List::GetCount()
{
    return Count;
}
Elem* List::GetElem(int pos)
{
    Elem* temp = Head;
    if (pos < 1 || pos > Count)
    {
        cout << "Incorrect position !!!\n";
        return 0;
    }
    int i = 1;
    while (i < pos && temp != 0)
    {
        temp = temp->next;
        i++;
    }
    if (temp == 0)
        return 0;
    else
        return temp;
}
void main()
{
    setlocale(LC_ALL, "rus");
    List L;
    People form;
    form.Number = 123;
    form.Surname = "Эгов";
    form.Name = "Евгений";
    form.Partonimyc = "Николаевич";
    L.AddHead(form);
    form.Number = 1234;
    form.Surname = "Эгов4";
    form.Name = "Евгений4";
    form.Partonimyc = "Николаевич4";
    L.AddTail(form);
    form.Number = 1234;
    form.Surname = "Эгов4";
    form.Name = "Евгений4";
    form.Partonimyc = "Николаевич4";
    L.AddTail(form);
    cout << "List L:\n";
    L.Print();
    cout << endl;
    L.Insert();
    cout << "List L:\n";
    L.Print();
    form.Number = 12345;
    form.Surname = "Эгов45";
    form.Name = "Евгений45";
    form.Partonimyc = "Николаевич45";
    cout << "Insert middle:\n";
    L.InsertMiddle(form);
    cout << "List L:\n";
    L.Print();
    int n;
    cout << "Input element position: ";
    cin >> n;
    cout << "List L:\n";
    L.Print(n);
}